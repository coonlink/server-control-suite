#!/usr/bin/env python3
import os
import sys
import json
import logging
import subprocess
import asyncio
import time
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG_FILE = "/root/critical_processes_config.sh"
CREDENTIALS_FILE = "/root/.telegram_credentials"
LOG_FILE = "/var/log/server_control_bot.log"
HISTORY_FILE = "/var/log/server_stats_history.json"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    config = {
        'BOT_TOKEN': None,
        'AUTHORIZED_ADMINS': [],
        'CPU_LIMITS': {},
        'MEMORY_LIMITS': {},
        'NOTIFICATION_LEVELS': {}
    }
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram
    try:
        with open(CREDENTIALS_FILE, 'r') as f:
            for line in f:
                if line.startswith('TELEGRAM_BOT_TOKEN='):
                    config['BOT_TOKEN'] = line.split('=')[1].strip().strip('"\'')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        with open(CONFIG_FILE, 'r') as f:
            content = f.read()
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
            if 'AUTHORIZED_ADMINS=(' in content:
                admins = content.split('AUTHORIZED_ADMINS=(')[1].split(')')[0]
                config['AUTHORIZED_ADMINS'] = [int(x.strip().strip('"')) for x in admins.split() if x.strip('"').isdigit()]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç—ã CPU
            if 'CPU_LIMIT_NORMAL=' in content:
                config['CPU_LIMITS']['normal'] = int(content.split('CPU_LIMIT_NORMAL=')[1].split('\n')[0])
            if 'CPU_LIMIT_STRICT=' in content:
                config['CPU_LIMITS']['strict'] = int(content.split('CPU_LIMIT_STRICT=')[1].split('\n')[0])
            if 'CPU_LIMIT_CRITICAL=' in content:
                config['CPU_LIMITS']['critical'] = int(content.split('CPU_LIMIT_CRITICAL=')[1].split('\n')[0])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    
    return config

config = load_config()
bot = Bot(token=config['BOT_TOKEN'])
dp = Dispatcher(bot)

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
        InlineKeyboardButton("üîÑ –ü—Ä–æ—Ü–µ—Å—Å—ã", callback_data="processes"),
        InlineKeyboardButton("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", callback_data="optimize"),
        InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data="logs"),
        InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∫–∞", callback_data="cleanup"),
        InlineKeyboardButton("üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º", callback_data="night_mode")
    )
    return keyboard

def get_processes_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data="show_all_processes"),
        InlineKeyboardButton("‚ö†Ô∏è –¢—è–∂–µ–ª—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã", callback_data="heavy_processes"),
        InlineKeyboardButton("üõë –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å CPU", callback_data="limit_cpu"),
        InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å", callback_data="clear_memory"),
        InlineKeyboardButton("üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏", callback_data="memory_stats"),
        InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏", callback_data="load_history"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return keyboard

def get_settings_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notification_settings"),
        InlineKeyboardButton("‚ö° –õ–∏–º–∏—Ç—ã CPU", callback_data="cpu_limits"),
        InlineKeyboardButton("üíæ –õ–∏–º–∏—Ç—ã –ø–∞–º—è—Ç–∏", callback_data="memory_limits"),
        InlineKeyboardButton("üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule_settings"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return keyboard

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
async def save_stats_history(stats):
    try:
        history = []
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, 'r') as f:
                history = json.load(f)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        history.append({
            'timestamp': datetime.now().isoformat(),
            'stats': stats
        })
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π
        if len(history) > 1000:
            history = history[-1000:]
        
        with open(HISTORY_FILE, 'w') as f:
            json.dump(history, f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def get_stats_history(hours=24):
    try:
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, 'r') as f:
                history = json.load(f)
                
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            current_time = datetime.now()
            filtered_history = [
                h for h in history 
                if (current_time - datetime.fromisoformat(h['timestamp'])).total_seconds() <= hours * 3600
            ]
            return filtered_history
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    return []

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def is_authorized(user_id):
    return user_id in config['AUTHORIZED_ADMINS']

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
def measure_time(func):
    async def wrapper(*args, **kwargs):
        start_time = time.time()
        result = await func(*args, **kwargs)
        end_time = time.time()
        generation_time = (end_time - start_time) * 1000  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        
        if isinstance(result, str):
            result = f"{result}\n\n<i>‚ö° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {generation_time:.1f}–º—Å</i>"
        elif isinstance(result, types.Message):
            if result.text:
                await result.edit_text(
                    f"{result.text}\n\n<i>‚ö° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {generation_time:.1f}–º—Å</i>",
                    reply_markup=result.reply_markup,
                    parse_mode="HTML"
                )
        return result
    return wrapper

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start', 'help'])
@measure_time
async def send_welcome(message: types.Message):
    if not is_authorized(message.from_user.id):
        return await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    
    return await message.reply(
        "ü§ñ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º v2.0\n\n"
        "üÜï –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "- üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏\n"
        "- üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º\n"
        "- ‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "- üîî –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
@dp.callback_query_handler(lambda c: True)
@measure_time
async def process_callback(callback_query: types.CallbackQuery):
    if not is_authorized(callback_query.from_user.id):
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é.")
        return
    
    action = callback_query.data
    
    try:
        if action == "stats":
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            history = await get_stats_history(24)
            if history:
                stats_text = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:\n\n"
                for entry in history[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
                    timestamp = datetime.fromisoformat(entry['timestamp']).strftime('%H:%M:%S')
                    stats = entry['stats']
                    stats_text += f"üïí {timestamp}\n"
                    stats_text += f"CPU: {stats.get('cpu', 'N/A')}%\n"
                    stats_text += f"RAM: {stats.get('memory', 'N/A')}%\n"
                    stats_text += "-------------------\n"
            else:
                stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∞"
            
            await callback_query.message.edit_text(
                stats_text,
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
        
        elif action == "night_mode":
            # –í–∫–ª—é—á–∞–µ–º –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º
            subprocess.Popen(["/root/night_optimize.sh"])
            await callback_query.message.edit_text(
                "üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ CPU: 5%\n"
                "- –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã\n"
                "- –ù–µ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã",
                reply_markup=get_main_keyboard()
            )
        
        elif action == "settings":
            await callback_query.message.edit_text(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
                reply_markup=get_settings_keyboard()
            )
        
        elif action == "status":
            result = subprocess.check_output(["/root/check_server_status.sh", "--silent"], 
                                          stderr=subprocess.STDOUT, 
                                          universal_newlines=True)
            await callback_query.message.edit_text(
                f"üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:\n\n{result}",
                reply_markup=get_main_keyboard()
            )
        
        elif action == "processes":
            await callback_query.message.edit_text(
                "üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏:",
                reply_markup=get_processes_keyboard()
            )
        
        elif action == "optimize":
            subprocess.Popen(["/root/optimize_server.sh"])
            await callback_query.message.edit_text(
                "‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞\n"
                "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                reply_markup=get_main_keyboard()
            )
        
        elif action == "logs":
            await callback_query.message.edit_text(
                "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤:",
                reply_markup=get_processes_keyboard()
            )
        
        elif action == "cleanup":
            subprocess.Popen(["sync && echo 3 > /proc/sys/vm/drop_caches"], shell=True)
            await callback_query.message.edit_text(
                "üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                reply_markup=get_main_keyboard()
            )
        
        elif action == "show_all_processes":
            result = subprocess.check_output(["ps aux --sort=-%cpu | head -11"], 
                                          shell=True, 
                                          universal_newlines=True)
            await callback_query.message.edit_text(
                f"üìä –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU:\n\n<pre>{result}</pre>",
                parse_mode="HTML",
                reply_markup=get_processes_keyboard()
            )
        
        elif action == "heavy_processes":
            result = subprocess.check_output(["/root/monitor_heavy_processes.sh", "--analyze"], 
                                          stderr=subprocess.STDOUT, 
                                          universal_newlines=True)
            await callback_query.message.edit_text(
                f"‚ö†Ô∏è –¢—è–∂–µ–ª—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:\n\n{result}",
                reply_markup=get_processes_keyboard()
            )
        
        elif action == "main_menu":
            await callback_query.message.edit_text(
                "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_keyboard()
            )
        
        elif action.startswith("logs_"):
            log_file = {
                "logs_system": "/var/log/syslog",
                "logs_cursor": "/var/log/cursor_monitor.log",
                "logs_optimize": "/var/log/optimize_server.log",
                "logs_bot": "/var/log/server_control_bot.log"
            }.get(action)
            
            if log_file:
                result = subprocess.check_output(f"tail -n 20 {log_file}", 
                                              shell=True, 
                                              universal_newlines=True)
                await callback_query.message.edit_text(
                    f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ ({log_file}):\n\n<pre>{result}</pre>",
                    parse_mode="HTML",
                    reply_markup=get_processes_keyboard()
                )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {action}: {e}")
        await callback_query.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
    
    await callback_query.answer()

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def stats_collector():
    while True:
        try:
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cpu_usage = subprocess.check_output("top -bn1 | grep 'Cpu(s)' | awk '{print $2}'", shell=True).decode().strip()
            memory_usage = subprocess.check_output("free | grep Mem | awk '{print $3/$2 * 100.0}'", shell=True).decode().strip()
            
            stats = {
                'cpu': float(cpu_usage),
                'memory': float(memory_usage)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await save_stats_history(stats)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        await asyncio.sleep(300)  # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä—â–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    loop = asyncio.get_event_loop()
    loop.create_task(stats_collector())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True) 