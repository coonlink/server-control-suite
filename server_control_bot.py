#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏.
"""
import os
import sys
import json
import logging
import subprocess
import asyncio
import time
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG_FILE = "/root/critical_processes_config.sh"
CREDENTIALS_FILE = "/root/.telegram_credentials"
LOG_FILE = "/var/log/server_control_bot.log"
HISTORY_FILE = "/var/log/server_stats_history.json"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

def load_config():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–æ–≤.
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    """
    config = {
        'BOT_TOKEN': None,
        'AUTHORIZED_ADMINS': [],
        'CPU_LIMITS': {},
        'MEMORY_LIMITS': {},
        'NOTIFICATION_LEVELS': {}
    }
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram
    try:
        with open(CREDENTIALS_FILE, 'r', encoding='utf-8') as f:
            for line in f:
                if line.startswith('TELEGRAM_BOT_TOKEN='):
                    config['BOT_TOKEN'] = line.split('=')[1].strip().strip('"\'')
    except (IOError, OSError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
            if 'AUTHORIZED_ADMINS=(' in content:
                admins = content.split('AUTHORIZED_ADMINS=(')[1].split(')')[0]
                config['AUTHORIZED_ADMINS'] = [int(x.strip().strip('"')) for x in admins.split() if x.strip('"').isdigit()]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç—ã CPU
            if 'CPU_LIMIT_NORMAL=' in content:
                config['CPU_LIMITS']['normal'] = int(content.split('CPU_LIMIT_NORMAL=')[1].split('\n')[0])
            if 'CPU_LIMIT_STRICT=' in content:
                config['CPU_LIMITS']['strict'] = int(content.split('CPU_LIMIT_STRICT=')[1].split('\n')[0])
            if 'CPU_LIMIT_CRITICAL=' in content:
                config['CPU_LIMITS']['critical'] = int(content.split('CPU_LIMIT_CRITICAL=')[1].split('\n')[0])
    except (IOError, OSError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    
    return config

config = load_config()
bot = Bot(token=config['BOT_TOKEN'])
dp = Dispatcher(bot)

def get_main_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞.
    
    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
        InlineKeyboardButton("üîÑ –ü—Ä–æ—Ü–µ—Å—Å—ã", callback_data="processes"),
        InlineKeyboardButton("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", callback_data="optimize"),
        InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data="logs"),
        InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∫–∞", callback_data="cleanup"),
        InlineKeyboardButton("üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º", callback_data="night_mode")
    )
    return keyboard

def get_processes_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏.
    
    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data="show_all_processes"),
        InlineKeyboardButton("‚ö†Ô∏è –¢—è–∂–µ–ª—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã", callback_data="heavy_processes"),
        InlineKeyboardButton("üõë –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å CPU", callback_data="limit_cpu"),
        InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å", callback_data="clear_memory"),
        InlineKeyboardButton("üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏", callback_data="memory_stats"),
        InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏", callback_data="load_history"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return keyboard

def get_settings_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    
    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notification_settings"),
        InlineKeyboardButton("‚ö° –õ–∏–º–∏—Ç—ã CPU", callback_data="cpu_limits"),
        InlineKeyboardButton("üíæ –õ–∏–º–∏—Ç—ã –ø–∞–º—è—Ç–∏", callback_data="memory_limits"),
        InlineKeyboardButton("üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule_settings"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return keyboard

async def save_stats_history(stats):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª.
    
    Args:
        stats (dict): –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        history = []
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                history = json.load(f)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        history.append({
            'timestamp': datetime.now().isoformat(),
            'stats': stats
        })
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π
        if len(history) > 1000:
            history = history[-1000:]
        
        with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(history, f)
    except (IOError, OSError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    except json.JSONDecodeError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def get_stats_history(hours=24):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    
    Args:
        hours (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
    """
    try:
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                history = json.load(f)
                
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            current_time = datetime.now()
            filtered_history = [
                h for h in history 
                if (current_time - datetime.fromisoformat(h['timestamp'])).total_seconds() <= hours * 3600
            ]
            return filtered_history
    except (IOError, OSError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    except json.JSONDecodeError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    return []

def is_authorized(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        
    Returns:
        bool: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    """
    return user_id in config['AUTHORIZED_ADMINS']

def measure_time(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏.
    
    Args:
        func (callable): –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
        
    Returns:
        callable: –û–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    async def wrapper(*args, **kwargs):
        start_time = time.time()
        result = await func(*args, **kwargs)
        end_time = time.time()
        generation_time = (end_time - start_time) * 1000  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        
        if isinstance(result, str):
            result = f"{result}\n\n<i>‚ö° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {generation_time:.1f}–º—Å</i>"
        elif isinstance(result, types.Message):
            if result.text:
                await result.edit_text(
                    f"{result.text}\n\n<i>‚ö° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {generation_time:.1f}–º—Å</i>",
                    reply_markup=result.reply_markup,
                    parse_mode="HTML"
                )
        return result
    return wrapper

@dp.message_handler(commands=['start', 'help'])
@measure_time
async def send_welcome(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help.
    
    Args:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        types.Message: –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if not is_authorized(message.from_user.id):
        return await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    
    return await message.reply(
        "ü§ñ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º v2.0\n\n"
        "üÜï –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "- üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏\n"
        "- üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º\n"
        "- ‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "- üîî –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda c: True)
@measure_time
async def process_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏.
    
    Args:
        callback_query (types.CallbackQuery): –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        
    Returns:
        types.Message: –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if not is_authorized(callback_query.from_user.id):
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é.")
        return
    
    action = callback_query.data
    
    try:
        if action == "stats":
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            history = await get_stats_history(24)
            if history:
                stats_text = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:\n\n"
                for entry in history[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
                    timestamp = datetime.fromisoformat(entry['timestamp']).strftime('%H:%M:%S')
                    stats = entry['stats']
                    stats_text += f"üïí {timestamp}\n"
                    stats_text += f"CPU: {stats.get('cpu', 'N/A')}%\n"
                    stats_text += f"RAM: {stats.get('memory', 'N/A')}%\n"
                    stats_text += "-------------------\n"
            else:
                stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∞"
            
            await callback_query.message.edit_text(
                stats_text,
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
        
        elif action == "night_mode":
            # –í–∫–ª—é—á–∞–µ–º –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º
            subprocess.Popen(["/root/night_optimize.sh"])
            await callback_query.message.edit_text(
                "üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ CPU: 5%\n"
                "- –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã\n"
                "- –ù–µ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã",
                reply_markup=get_main_keyboard()
            )
        
        elif action == "settings":
            await callback_query.message.edit_text(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
                reply_markup=get_settings_keyboard()
            )
        
        elif action == "status":
            try:
                result = subprocess.check_output(
                    ["/root/check_server_status.sh", "--silent"], 
                    stderr=subprocess.STDOUT, 
                    universal_newlines=True
                )
                await callback_query.message.edit_text(
                    f"üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:\n\n{result}",
                    reply_markup=get_main_keyboard()
                )
            except subprocess.CalledProcessError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                await callback_query.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e.output}",
                    reply_markup=get_main_keyboard()
                )
        
        elif action == "processes":
            await callback_query.message.edit_text(
                "üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏:",
                reply_markup=get_processes_keyboard()
            )
        
        elif action == "optimize":
            subprocess.Popen(["/root/optimize_server.sh"])
            await callback_query.message.edit_text(
                "‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞\n"
                "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                reply_markup=get_main_keyboard()
            )
        
        elif action == "logs":
            await callback_query.message.edit_text(
                "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤:",
                reply_markup=get_processes_keyboard()
            )
        
        elif action == "cleanup":
            try:
                subprocess.run("sync && echo 3 > /proc/sys/vm/drop_caches", 
                               shell=True, 
                               check=True, 
                               stderr=subprocess.PIPE)
                await callback_query.message.edit_text(
                    "üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                    reply_markup=get_main_keyboard()
                )
            except subprocess.CalledProcessError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
                await callback_query.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e.stderr.decode() if e.stderr else str(e)}",
                    reply_markup=get_main_keyboard()
                )
        
        elif action == "show_all_processes":
            try:
                result = subprocess.check_output(
                    ["ps", "aux", "--sort=-%cpu"], 
                    universal_newlines=True
                )
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 11 —Å—Ç—Ä–æ–∫ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + 10 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤)
                result_lines = result.split('\n')[:11]
                result = '\n'.join(result_lines)
                
                await callback_query.message.edit_text(
                    f"üìä –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU:\n\n<pre>{result}</pre>",
                    parse_mode="HTML",
                    reply_markup=get_processes_keyboard()
                )
            except subprocess.CalledProcessError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
                await callback_query.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e.output}",
                    reply_markup=get_processes_keyboard()
                )
        
        elif action == "heavy_processes":
            try:
                result = subprocess.check_output(
                    ["/root/monitor_heavy_processes.sh", "--analyze"], 
                    stderr=subprocess.STDOUT, 
                    universal_newlines=True
                )
                await callback_query.message.edit_text(
                    f"‚ö†Ô∏è –¢—è–∂–µ–ª—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:\n\n{result}",
                    reply_markup=get_processes_keyboard()
                )
            except subprocess.CalledProcessError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—è–∂–µ–ª—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
                await callback_query.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e.output}",
                    reply_markup=get_processes_keyboard()
                )
        
        elif action == "main_menu":
            await callback_query.message.edit_text(
                "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_keyboard()
            )
        
        elif action.startswith("logs_"):
            log_files = {
                "logs_system": "/var/log/syslog",
                "logs_cursor": "/var/log/cursor_monitor.log",
                "logs_optimize": "/var/log/optimize_server.log",
                "logs_bot": "/var/log/server_control_bot.log"
            }
            
            log_file = log_files.get(action)
            
            if log_file:
                try:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞
                    result = subprocess.check_output(
                        ["tail", "-n", "20", log_file],
                        universal_newlines=True
                    )
                    await callback_query.message.edit_text(
                        f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ ({log_file}):\n\n<pre>{result}</pre>",
                        parse_mode="HTML",
                        reply_markup=get_processes_keyboard()
                    )
                except subprocess.CalledProcessError as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞ {log_file}: {e}")
                    await callback_query.message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞: {e.output}",
                        reply_markup=get_processes_keyboard()
                    )
        else:
            await callback_query.message.edit_text(
                f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}",
                reply_markup=get_main_keyboard()
            )
    
    except subprocess.SubprocessError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è subprocess –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {action}: {e}")
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}",
            reply_markup=get_main_keyboard()
        )
    except asyncio.CancelledError:
        logging.warning(f"–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è callback {action}")
        raise
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {action}: {e}", exc_info=True)
        await callback_query.message.edit_text(
            f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_main_keyboard()
        )
    
    await callback_query.answer()

async def stats_collector():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ —Å–∏—Å—Ç–µ–º–µ.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.
    """
    while True:
        try:
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø–æ–º–æ—â—å—é –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            cpu_process = subprocess.run(
                ["top", "-bn1"], 
                capture_output=True, 
                text=True, 
                check=True
            )
            cpu_usage = subprocess.run(
                ["grep", "Cpu(s)", "-"], 
                input=cpu_process.stdout,
                capture_output=True, 
                text=True, 
                check=True
            )
            cpu_value = subprocess.run(
                ["awk", "{print $2}"], 
                input=cpu_usage.stdout,
                capture_output=True, 
                text=True, 
                check=True
            )
            
            memory_process = subprocess.run(
                ["free"], 
                capture_output=True, 
                text=True, 
                check=True
            )
            memory_usage = subprocess.run(
                ["grep", "Mem"], 
                input=memory_process.stdout,
                capture_output=True, 
                text=True, 
                check=True
            )
            memory_value = subprocess.run(
                ["awk", "{print $3/$2 * 100.0}"], 
                input=memory_usage.stdout,
                capture_output=True, 
                text=True, 
                check=True
            )
            
            stats = {
                'cpu': float(cpu_value.stdout.strip()),
                'memory': float(memory_value.stdout.strip())
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await save_stats_history(stats)
            
        except ValueError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        except subprocess.SubprocessError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        except Exception as e:
            logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        
        try:
            await asyncio.sleep(300)  # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        except asyncio.CancelledError:
            logging.info("–°–±–æ—Ä—â–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    try:
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä—â–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        loop = asyncio.get_event_loop()
        loop.create_task(stats_collector())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        executor.start_polling(dp, skip_updates=True)
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True) 
