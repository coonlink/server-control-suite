#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏.
"""
import os
import sys
import json
import logging
import subprocess
import time
from datetime import datetime
try:
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
    from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
except ImportError as e:
    logging.critical("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-telegram-bot: %s", e)
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python-telegram-bot –≤–µ—Ä—Å–∏–∏ 13.7: pip install python-telegram-bot==13.7")
    sys.exit(1)

# –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
CONFIG_FILE = os.path.join(BASE_DIR, "critical_processes_config.sh")
CREDENTIALS_FILE = os.path.join(BASE_DIR, ".telegram_credentials")
LOG_FILE = os.path.join(BASE_DIR, "server_control_bot.log")
HISTORY_FILE = os.path.join(BASE_DIR, "server_stats_history.json")

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç - –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
STATUS_REPORT_INTERVAL = 3600  # 1 —á–∞—Å

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)

def load_config():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–æ–≤ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    """
    cfg = {
        'BOT_TOKEN': None,
        'AUTHORIZED_ADMINS': [],
        'CPU_LIMITS': {
            'normal': 50,    # Default values
            'strict': 30,
            'critical': 10
        },
        'MEMORY_LIMITS': {},
        'NOTIFICATION_LEVELS': {}
    }
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    if env_token:
        cfg['BOT_TOKEN'] = env_token
        logging.info("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º chat_id –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_chat_id = os.environ.get('TELEGRAM_CHAT_ID')
    if env_chat_id and env_chat_id.isdigit():
        cfg['AUTHORIZED_ADMINS'] = [int(env_chat_id)]
        logging.info("ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_CHAT_ID")
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
    if not cfg['BOT_TOKEN'] or not cfg['AUTHORIZED_ADMINS']:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram –∏–∑ —Ñ–∞–π–ª–∞
        try:
            if os.path.exists(CREDENTIALS_FILE):
                with open(CREDENTIALS_FILE, 'r', encoding='utf-8') as f:
                    for line in f:
                        if line.startswith('TELEGRAM_BOT_TOKEN=') and not cfg['BOT_TOKEN']:
                            cfg['BOT_TOKEN'] = line.split('=')[1].strip().strip('"\'')
                        elif line.startswith('TELEGRAM_CHAT_ID=') and not cfg['AUTHORIZED_ADMINS']:
                            chat_id = line.split('=')[1].strip().strip('"\'')
                            if chat_id.isdigit():
                                cfg['AUTHORIZED_ADMINS'] = [int(chat_id)]
        except (IOError, OSError) as e:
            logging.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %s", e)
            if not cfg['BOT_TOKEN'] or not cfg['AUTHORIZED_ADMINS']:
                logging.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–∏ –∏–∑ —Ñ–∞–π–ª–∞")
                sys.exit(1)
        except Exception as e:  # pylint: disable=broad-exception-caught
            logging.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %s", e)
            if not cfg['BOT_TOKEN'] or not cfg['AUTHORIZED_ADMINS']:
                logging.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–∏ –∏–∑ —Ñ–∞–π–ª–∞")
                sys.exit(1)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                content = f.read()
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                if not cfg['AUTHORIZED_ADMINS'] and 'AUTHORIZED_ADMINS=(' in content:
                    try:
                        admins = content.split('AUTHORIZED_ADMINS=(')[1].split(')')[0]
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞, —Ñ–∏–ª—å—Ç—Ä—É—è —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
                        cfg['AUTHORIZED_ADMINS'] = [
                            int(x.strip().strip('"'))
                            for x in admins.split()
                            if x.strip('"').isdigit()
                        ]
                    except Exception as e:
                        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: %s", e)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç—ã CPU
            try:
                # –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –∏—Å–∫–ª—é—á–∞—è shell-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å ${} –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                normal_pattern = r'CPU_LIMIT_NORMAL=(\d+)'
                strict_pattern = r'CPU_LIMIT_STRICT=(\d+)'
                critical_pattern = r'CPU_LIMIT_CRITICAL=(\d+)'
                
                import re
                normal_match = re.search(normal_pattern, content)
                strict_match = re.search(strict_pattern, content)
                critical_match = re.search(critical_pattern, content)
                
                if normal_match:
                    cfg['CPU_LIMITS']['normal'] = int(normal_match.group(1))
                if strict_match:
                    cfg['CPU_LIMITS']['strict'] = int(strict_match.group(1))
                if critical_match:
                    cfg['CPU_LIMITS']['critical'] = int(critical_match.group(1))
            except Exception as e:
                logging.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏–º–∏—Ç–æ–≤ CPU, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s", e)
    except (IOError, OSError) as e:
        logging.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %s", e)
    except Exception as e:  # pylint: disable=broad-exception-caught
        logging.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %s", e)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not cfg['BOT_TOKEN']:
        logging.critical("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        sys.exit(1)
    
    if not cfg['AUTHORIZED_ADMINS']:
        logging.warning("–ù–µ —É–∫–∞–∑–∞–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã. –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
    
    # Log the configuration (without sensitive data)
    logging.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    logging.info("CPU –ª–∏–º–∏—Ç—ã: %s", cfg['CPU_LIMITS'])
    
    return cfg

config = load_config()

def get_main_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞.
    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    keyboard = [
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
            InlineKeyboardButton("üîÑ –ü—Ä–æ—Ü–µ—Å—Å—ã", callback_data="processes")
        ],
        [
            InlineKeyboardButton("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", callback_data="optimize"),
            InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data="logs")
        ],
        [
            InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ],
        [
            InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∫–∞", callback_data="cleanup"),
            InlineKeyboardButton("üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º", callback_data="night_mode")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_processes_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏.
    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    keyboard = [
        [
            InlineKeyboardButton("üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data="show_all_processes"),
            InlineKeyboardButton("‚ö†Ô∏è –¢—è–∂–µ–ª—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã", callback_data="heavy_processes")
        ],
        [
            InlineKeyboardButton("üõë –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å CPU", callback_data="limit_cpu"),
            InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å", callback_data="clear_memory")
        ],
        [
            InlineKeyboardButton("üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏", callback_data="memory_stats"),
            InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏", callback_data="load_history")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_settings_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    keyboard = [
        [
            InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notification_settings"),
            InlineKeyboardButton("‚ö° –õ–∏–º–∏—Ç—ã CPU", callback_data="cpu_limits")
        ],
        [
            InlineKeyboardButton("üíæ –õ–∏–º–∏—Ç—ã –ø–∞–º—è—Ç–∏", callback_data="memory_limits"),
            InlineKeyboardButton("üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule_settings")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def save_stats_history(stats):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª.
    Args:
        stats (dict): –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        history = []
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                history = json.load(f)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        history.append({
            'timestamp': datetime.now().isoformat(),
            'stats': stats
        })
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π
        if len(history) > 1000:
            history = history[-1000:]
        
        with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(history, f)
    except (IOError, OSError) as e:
        logging.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %s", e)
    except json.JSONDecodeError as e:
        logging.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %s", e)
    except Exception as e:  # pylint: disable=broad-exception-caught
        logging.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %s", e)

async def get_stats_history(hours=24):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    Args:
        hours (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    Returns:
        list: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
    """
    try:
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                history = json.load(f)
                
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            current_time = datetime.now()
            hours_in_seconds = hours * 3600
            filtered_history = [
                h for h in history
                if (current_time - datetime.fromisoformat(h['timestamp'])).total_seconds() <= hours_in_seconds
            ]
            return filtered_history
    except (IOError, OSError) as e:
        logging.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %s", e)
    except json.JSONDecodeError as e:
        logging.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %s", e)
    except Exception as e:  # pylint: disable=broad-exception-caught
        logging.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %s", e)
    return []

def is_authorized(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    Returns:
        bool: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    """
    return user_id in config['AUTHORIZED_ADMINS']

def measure_time(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏.
    Args:
        func (callable): –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
    Returns:
        callable: –û–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    async def wrapper(*args, **kwargs):
        start_time = time.time()
        result = await func(*args, **kwargs)
        end_time = time.time()
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        _ = (end_time - start_time) * 1000
        
        return result
    return wrapper

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
def start_command(update: Update, _context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help."""
    if not is_authorized(update.effective_user.id):
        update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    update.message.reply_text(
        "ü§ñ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º v1.0\n\n"
        "üÜï –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "- üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏\n"
        "- üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º\n"
        "- ‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "- üîî –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
def button_callback(update: Update, _context: CallbackContext):  # pylint: disable=too-many-branches,too-many-statements
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.info("–ü–æ–ª—É—á–µ–Ω callback: %s –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", 
                 query.data, query.from_user.id)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
    try:
        query.answer()
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: %s", e)
    
    if not is_authorized(query.from_user.id):
        try:
            query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é.")
            logging.warning("–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç ID: %s", 
                           query.from_user.id)
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ: %s", e)
        return
    
    action = query.data
    
    try:
        logging.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–µ–π—Å—Ç–≤–∏—è: %s", action)
        
        if action == "stats":
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –≤–º–µ—Å—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ
            stats_text = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏"
            
            query.edit_message_text(
                stats_text,
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
        
        elif action == "night_mode":
            # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –î–∞, –≤–∫–ª—é—á–∏—Ç—å", callback_data="confirm_night_mode"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.edit_message_text(
                "üåô –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º?\n\n"
                "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ "
                "–∏ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã.",
                reply_markup=reply_markup
            )
        
        elif action == "confirm_night_mode":
            # –í–∫–ª—é—á–∞–µ–º –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            night_script = os.path.join(BASE_DIR, "night_optimize.sh")
            with subprocess.Popen([night_script]) as _:
                pass
            query.edit_message_text(
                "üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ CPU: 5%\n"
                "- –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã\n"
                "- –ù–µ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã",
                reply_markup=get_main_keyboard()
            )
        
        elif action == "settings":
            query.edit_message_text(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
                reply_markup=get_settings_keyboard()
            )
        
        elif action == "status":
            try:
                status_script = os.path.join(BASE_DIR, "check_server_status.sh")
                cmd = [status_script, "--silent"]
                result = subprocess.check_output(
                    cmd, stderr=subprocess.STDOUT, universal_newlines=True
                )
                query.edit_message_text(
                    f"üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:\n\n{result}",
                    reply_markup=get_main_keyboard()
                )
            except subprocess.CalledProcessError as e:
                logging.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞: %s", e)
                query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e.output}",
                    reply_markup=get_main_keyboard()
                )
        
        elif action == "processes":
            # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="confirm_processes"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.edit_message_text(
                "üîÑ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏?\n\n"
                "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å "
                "–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞.",
                reply_markup=reply_markup
            )
        
        elif action == "confirm_processes":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            query.edit_message_text(
                "üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏:",
                reply_markup=get_processes_keyboard()
            )
        
        elif action == "optimize":
            # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –î–∞, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data="confirm_optimize"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.edit_message_text(
                "‚ö° –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞?\n\n"
                "‚ö†Ô∏è –í–æ –≤—Ä–µ–º—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.",
                reply_markup=reply_markup
            )
        
        elif action == "confirm_optimize":
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            optimize_script = os.path.join(BASE_DIR, "optimize_server.sh")
            with subprocess.Popen([optimize_script]) as _:
                pass
            query.edit_message_text(
                "‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞\n"
                "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                reply_markup=get_main_keyboard()
            )
        
        elif action == "logs":
            query.edit_message_text(
                "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤:",
                reply_markup=get_processes_keyboard()
            )
        
        elif action == "cleanup":
            # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_cleanup"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.edit_message_text(
                "üßπ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Å–µ—Ä–≤–µ—Ä–∞?\n\n"
                "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è –∑–∞–º–µ–¥–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.",
                reply_markup=reply_markup
            )
        
        elif action == "confirm_cleanup":
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            try:
                subprocess.run(
                    "sync && echo 3 > /proc/sys/vm/drop_caches",
                    shell=True, check=True, stderr=subprocess.PIPE
                )
                query.edit_message_text(
                    "üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                    reply_markup=get_main_keyboard()
                )
            except subprocess.CalledProcessError as e:
                logging.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: %s", e)
                error_msg = e.stderr.decode() if e.stderr else str(e)
                query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {error_msg}",
                    reply_markup=get_main_keyboard()
                )
        
        elif action == "show_all_processes":
            try:
                result = subprocess.check_output(
                    ["ps", "aux", "--sort=-%cpu"],
                    universal_newlines=True
                )
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 11 —Å—Ç—Ä–æ–∫ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + 10 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤)
                result_lines = result.split('\n')[:11]
                result = '\n'.join(result_lines)
                
                query.edit_message_text(
                    f"üìä –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU:\n\n<pre>{result}</pre>",
                    parse_mode="HTML",
                    reply_markup=get_processes_keyboard()
                )
            except subprocess.CalledProcessError as e:
                logging.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: %s", e)
                query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e.output}",
                    reply_markup=get_processes_keyboard()
                )
        
        elif action == "heavy_processes":
            try:
                heavy_script = os.path.join(BASE_DIR, "monitor_heavy_processes.sh")
                cmd = [heavy_script, "--analyze"]
                result = subprocess.check_output(
                    cmd, stderr=subprocess.STDOUT, universal_newlines=True
                )
                query.edit_message_text(
                    f"‚ö†Ô∏è –¢—è–∂–µ–ª—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:\n\n{result}",
                    reply_markup=get_processes_keyboard()
                )
            except subprocess.CalledProcessError as e:
                logging.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—è–∂–µ–ª—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: %s", e)
                query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e.output}",
                    reply_markup=get_processes_keyboard()
                )
        
        elif action == "main_menu":
            query.edit_message_text(
                "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_keyboard()
            )
        
        elif action.startswith("logs_"):
            log_files = {
                "logs_system": "/var/log/syslog",
                "logs_cursor": "/var/log/cursor_monitor.log",
                "logs_optimize": "/var/log/optimize_server.log",
                "logs_bot": "/var/log/server_control_bot.log"
            }
            
            log_file = log_files.get(action)
            
            if log_file:
                try:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞
                    result = subprocess.check_output(
                        ["tail", "-n", "20", log_file],
                        universal_newlines=True
                    )
                    query.edit_message_text(
                        f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ ({log_file}):\n\n<pre>{result}</pre>",
                        parse_mode="HTML",
                        reply_markup=get_processes_keyboard()
                    )
                except subprocess.CalledProcessError as e:
                    logging.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞ %s: %s", log_file, e)
                    query.edit_message_text(
                        f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞: {e.output}",
                        reply_markup=get_processes_keyboard()
                    )
        else:
            query.edit_message_text(
                f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}",
                reply_markup=get_main_keyboard()
            )
    
    except subprocess.SubprocessError as e:
        logging.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è subprocess –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback %s: %s", action, e)
        try:
            query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}",
                reply_markup=get_main_keyboard()
            )
        except Exception as edit_err:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", edit_err)
    except Exception as e:  # pylint: disable=broad-exception-caught
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback %s: %s", action, e, exc_info=True)
        try:
            query.edit_message_text(
                f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_main_keyboard()
            )
        except Exception as edit_err:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", edit_err)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
def get_server_status():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∫—Ä–∏–ø—Ç check_server_status.sh
    Returns:
        str: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    """
    try:
        status_script = os.path.join(BASE_DIR, "check_server_status.sh")
        cmd = [status_script, "--silent"]
        result = subprocess.check_output(
            cmd, stderr=subprocess.STDOUT, universal_newlines=True
        )
        return result
    except subprocess.CalledProcessError as e:
        logging.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞: %s", e)
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e.output}"
    except Exception as e:  # pylint: disable=broad-exception-caught
        logging.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: %s", e)
        return f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç–∞—Ç—É—Å–µ
def send_status_report(context: CallbackContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    Args:
        context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞
    """
    status = get_server_status()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    hostname = subprocess.check_output("hostname", universal_newlines=True).strip()
    
    message = f"üìä *–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞*\n\n" \
              f"üìÜ –í—Ä–µ–º—è: {timestamp}\n" \
              f"üñ•Ô∏è –•–æ—Å—Ç: {hostname}\n\n" \
              f"{status}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in config['AUTHORIZED_ADMINS']:
        try:
            context.bot.send_message(
                chat_id=admin_id,
                text=message,
                parse_mode="Markdown"
            )
            logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É %s", admin_id)
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É %s: %s", admin_id, e)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
def check_system_load(context: CallbackContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä—É–∑–∫—É —Å–∏—Å—Ç–µ–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã.
    
    Args:
        context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä—É–∑–∫—É —Å–∏—Å—Ç–µ–º—ã
        load_avg = os.getloadavg()
        one_min_load = load_avg[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
        critical_limit = config['CPU_LIMITS'].get('critical', 10)
        strict_limit = config['CPU_LIMITS'].get('strict', 30)
        normal_limit = config['CPU_LIMITS'].get('normal', 50)
        
        # –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if one_min_load > normal_limit:
            message = f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {one_min_load:.2f}\n\n"
            message += "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
            message += "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞: ./optimize_server.sh\n"
            message += "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—è–∂–µ–ª—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: ./monitor_heavy_processes.sh"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = [
                [
                    InlineKeyboardButton("‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data="optimize"),
                    InlineKeyboardButton("üîç –¢—è–∂–µ–ª—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã", callback_data="heavy_processes")
                ],
                [
                    InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
                    InlineKeyboardButton("üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º", callback_data="night_mode")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in config['AUTHORIZED_ADMINS']:
                try:
                    context.bot.send_message(
                        chat_id=admin_id,
                        text=message,
                        reply_markup=reply_markup
                    )
                    logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω—É %s", admin_id)
                except Exception as e:
                    logging.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω—É %s: %s", admin_id, e)
    
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã: %s", e)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    try:
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º Updater –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        updater = Updater(config['BOT_TOKEN'])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        dispatcher = updater.dispatcher
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dispatcher.add_handler(CommandHandler("start", start_command))
        dispatcher.add_handler(CommandHandler("help", start_command))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
        callback_handler = CallbackQueryHandler(button_callback)
        dispatcher.add_handler(callback_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
        job_queue = updater.job_queue
        job_queue.run_repeating(
            send_status_report, 
            interval=STATUS_REPORT_INTERVAL,
            first=300  # –ü–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        )
        logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω. –ò–Ω—Ç–µ—Ä–≤–∞–ª: %s —Å–µ–∫—É–Ω–¥", STATUS_REPORT_INTERVAL)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        job_queue.run_repeating(
            check_system_load,
            interval=600,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            first=120  # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        )
        logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω. –ò–Ω—Ç–µ—Ä–≤–∞–ª: 600 —Å–µ–∫—É–Ω–¥")
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
        # –ü—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        logging.info("–ó–∞–ø—É—Å–∫–∞–µ–º polling...")
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        updater.start_polling(poll_interval=1.0, timeout=30, drop_pending_updates=False, read_latency=2.0)
        logging.info("Polling –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        updater.idle()
        
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:  # pylint: disable=broad-exception-caught
        logging.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: %s", e, exc_info=True)
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
