#!/bin/bash

# Get script directory for relative paths
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
CONFIG_FILE="$SCRIPT_DIR/critical_processes_config.sh"
if [ -f "$CONFIG_FILE" ]; then
  source "$CONFIG_FILE"
else
  echo "–û—à–∏–±–∫–∞: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª $CONFIG_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω."
  exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram
if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
  echo "–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –≤ $CONFIG_FILE"
  exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è CPU –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π
get_average_cpu() {
  local samples=$1
  local interval=$2
  local sum=0
  
  echo "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ CPU –∑–∞ $samples –∏–∑–º–µ—Ä–µ–Ω–∏–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º $interval —Å–µ–∫—É–Ω–¥..." >&2
  
  for i in $(seq 1 $samples); do
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')
    sum=$(echo "$sum + $cpu_usage" | bc)
    if [ $i -lt $samples ]; then
      sleep $interval
    fi
  done
  
  echo "scale=1; $sum / $samples" | bc
}

# –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã
HOSTNAME=$(hostname)
UPTIME=$(uptime -p)
LOAD=$(uptime | awk -F'[a-z]:' '{ print $2}' | awk '{print $1, $2, $3}' | tr -d ',')
LOAD_1=$(echo $LOAD | awk '{print $1}')
LOAD_5=$(echo $LOAD | awk '{print $2}')
LOAD_15=$(echo $LOAD | awk '{print $3}')
MEMORY=$(free -h)
MEM_PERCENT=$(free | grep Mem | awk '{print int($3/$2 * 100)}')
DISK_USAGE=$(df -h | grep -v tmpfs | grep -v udev)
DISK_PERCENT=$(df -h | grep '/$' | awk '{print $5}' | tr -d '%')
TOP_CPU=$(ps aux --sort=-%cpu | head -6 | tail -5 | awk '{print $11, " (PID:", $2, "CPU:", $3"%)"}')
TOP_MEM=$(ps aux --sort=-%mem | head -6 | tail -5 | awk '{print $11, " (PID:", $2, "MEM:", $4"%)"}')
CPU_USAGE=$(get_average_cpu 3 1)
OPEN_PORTS=$(netstat -tuln | grep LISTEN | awk '{print $4}' | sort)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
LOAD_HISTORY=""
LOG_FILE="$SCRIPT_DIR/performance_stats.log"
if [ -f "$LOG_FILE" ]; then
  LOAD_HISTORY="üìà <b>–ò—Å—Ç–æ—Ä–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏:</b>
<pre>$(tail -n 5 $LOG_FILE)</pre>"
fi

# –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
MESSAGE="üñ•Ô∏è <b>–°–¢–ê–¢–£–° –°–ï–†–í–ï–†–ê</b> üñ•Ô∏è

‚è±Ô∏è <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> $UPTIME
üîÑ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>
   - 1 –º–∏–Ω: $LOAD_1
   - 5 –º–∏–Ω: $LOAD_5
   - 15 –º–∏–Ω: $LOAD_15
üíª <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU:</b> ${CPU_USAGE}%
üíæ <b>–ü–∞–º—è—Ç—å:</b>
$MEMORY
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${MEM_PERCENT}%

üíø <b>–î–∏—Å–∫:</b>
$DISK_USAGE
/ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞: ${DISK_PERCENT}%

‚ö° <b>–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ CPU:</b>
$TOP_CPU

üß† <b>–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –ø–∞–º—è—Ç–∏:</b>
$TOP_MEM

üîå <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã:</b>
$OPEN_PORTS

$LOAD_HISTORY

üïí –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: $(date '+%Y-%m-%d %H:%M:%S')"

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
send_telegram_notification "$MESSAGE"

echo "–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
WARNINGS=""
CRIT_COUNT=0

# Lower the threshold for notification if it's a server with low CPU count
CPU_COUNT=$(grep -c ^processor /proc/cpuinfo)
if [ $CPU_COUNT -le 2 ]; then
  LOAD_WARNING_THRESHOLD=4.0 # –¥–ª—è —Å–ª–∞–±—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å 1-2 —è–¥—Ä–∞–º–∏
  LOAD_INFO_THRESHOLD=3.0
elif [ $CPU_COUNT -le 4 ]; then
  LOAD_WARNING_THRESHOLD=6.0 # –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å 3-4 —è–¥—Ä–∞–º–∏
  LOAD_INFO_THRESHOLD=4.0
else
  LOAD_WARNING_THRESHOLD=10.0 # –¥–ª—è –º–æ—â–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å 5+ —è–¥—Ä–∞–º–∏ (–±—ã–ª–æ 7.0)
  LOAD_INFO_THRESHOLD=7.0 # –±—ã–ª–æ 5.0
fi

# Adjust load thresholds based on CPU count - —ç—Ç–æ –Ω–µ –¥–ª—è –æ–±—â–µ–≥–æ LOAD_THRESHOLD, –∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ADJUSTED_LOAD_THRESHOLD=$(echo "scale=1; $CPU_COUNT * 1.5" | bc)
if (( $(echo "$ADJUSTED_LOAD_THRESHOLD < $LOAD_THRESHOLD" | bc -l) )); then
  EFFECTIVE_LOAD_THRESHOLD=$ADJUSTED_LOAD_THRESHOLD
else
  EFFECTIVE_LOAD_THRESHOLD=$LOAD_THRESHOLD
fi

# Check load average
if (( $(echo "$LOAD_1 > $EFFECTIVE_LOAD_THRESHOLD" | bc -l) )); then
  WARNINGS+="‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã: $LOAD_1 (–ø–æ—Ä–æ–≥: $EFFECTIVE_LOAD_THRESHOLD)\n\n"
  CRIT_COUNT=$((CRIT_COUNT + 1))
  
  # Recommended actions for high load
  WARNINGS+="üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ:\n"
  WARNINGS+="1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º CPU: 'top -c'\n"
  WARNINGS+="2. –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –Ω–µ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:\n   'nice -n 19 COMMAND' –∏–ª–∏ 'renice 19 -p PID'\n"
  WARNINGS+="3. –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n\n"
elif (( $(echo "$LOAD_1 > $LOAD_WARNING_THRESHOLD" | bc -l) )); then
  WARNINGS+="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–≤—ã—à–µ–Ω–∞: $LOAD_1 (–ø–æ—Ä–æ–≥: $LOAD_WARNING_THRESHOLD)\n\n"
fi

# Check memory usage
if [ $MEM_PERCENT -ge $MEM_CRITICAL ]; then
  WARNINGS+="‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${MEM_PERCENT}% (–ø–æ—Ä–æ–≥: ${MEM_CRITICAL}%)\n\n"
  CRIT_COUNT=$((CRIT_COUNT + 1))
  
  # Recommended actions for high memory usage
  WARNINGS+="üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏:\n"
  WARNINGS+="1. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à: 'echo 3 > /proc/sys/vm/drop_caches'\n"
  WARNINGS+="2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏: 'ps aux --sort=-%mem | head'\n"
  WARNINGS+="3. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å —É—Ç–µ—á–∫–∞–º–∏ –ø–∞–º—è—Ç–∏\n\n"
elif [ $MEM_PERCENT -ge $MEM_WARNING ]; then
  WARNINGS+="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${MEM_PERCENT}% (–ø–æ—Ä–æ–≥: ${MEM_WARNING}%)\n\n"
fi

# Check disk usage
if [ $DISK_PERCENT -ge $DISK_CRITICAL ]; then
  WARNINGS+="‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${DISK_PERCENT}% (–ø–æ—Ä–æ–≥: ${DISK_CRITICAL}%)\n\n"
  CRIT_COUNT=$((CRIT_COUNT + 1))
  
  # Recommended actions for high disk usage
  WARNINGS+="üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∏—Å–∫–∞:\n"
  WARNINGS+="1. –û—á–∏—Å—Ç–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏: 'find /var/log -type f -name \"*.gz\" -delete'\n"
  WARNINGS+="2. –ù–∞–π–¥–∏—Ç–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã: 'find / -type f -size +100M -exec ls -lh {} \\;'\n"
  WARNINGS+="3. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à apt: 'apt-get clean'\n\n"
elif [ $DISK_PERCENT -ge $DISK_WARNING ]; then
  WARNINGS+="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${DISK_PERCENT}% (–ø–æ—Ä–æ–≥: ${DISK_WARNING}%)\n\n"
fi

# Send warnings if any
if [ -n "$WARNINGS" ]; then
  SUBJECT="‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ $HOSTNAME"
  send_telegram_notification "$SUBJECT\n\n$WARNINGS"
fi

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
STATS_FILE="$SCRIPT_DIR/performance_stats.log"
DATE=$(date +"%Y-%m-%d %H:%M:%S")
echo "$DATE | Load: $LOAD_1 $LOAD_5 $LOAD_15 | CPU: ${CPU_USAGE}% | Mem: ${MEM_PERCENT}% | Disk: ${DISK_PERCENT}%" >> "$STATS_FILE"

exit 0 