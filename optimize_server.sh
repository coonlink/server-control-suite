#!/bin/bash

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
LOG_DIR="/var/log"
MAX_LOG_SIZE_MB=100
DATE=$(date '+%Y-%m-%d_%H-%M-%S')
OPTIMIZE_LOG="/var/log/optimize_server.log"
CONFIG_FILE="/root/critical_processes_config.sh"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
if [ -f "$CONFIG_FILE" ]; then
  source "$CONFIG_FILE"
else
  echo "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª $CONFIG_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
  # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  LOAD_THRESHOLD=5.0
  CPU_CRITICAL=80.0
  MEM_CRITICAL=80.0
  DISK_CRITICAL=90.0
  CPU_LIMIT_NORMAL=30
  CPU_LIMIT_STRICT=15
  CPU_LIMIT_CRITICAL=5
fi

log_message() {
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a $OPTIMIZE_LOG
}

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
log_message "=== –ù–∞—á–∞–ª–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ ==="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
check_load() {
  LOAD=$(cat /proc/loadavg | cut -d' ' -f1)
  if (( $(echo "$LOAD > $LOAD_THRESHOLD" | bc -l) )); then
    return 0  # –Ω–∞–≥—Ä—É–∑–∫–∞ –≤—ã—Å–æ–∫–∞—è
  else
    return 1  # –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
send_alert() {
  local load=$(cat /proc/loadavg | cut -d' ' -f1)
  local mem_usage=$(free -m | awk 'NR==2{printf "%.2f", $3*100/$2}')
  local disk_usage=$(df -h / | awk 'NR==2{print $5}' | tr -d '%')
  
  # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
  local top_processes=$(ps aux --sort=-%cpu | head -6)
  
  # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  local message="üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–ì–†–£–ó–ö–ê –ù–ê –°–ï–†–í–ï–†–ï!</b> üö®
  
üìä <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
- –ù–∞–≥—Ä—É–∑–∫–∞: $load (–ø–æ—Ä–æ–≥: $LOAD_THRESHOLD)
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${mem_usage}% (–ø–æ—Ä–æ–≥: $MEM_CRITICAL%)
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${disk_usage}% (–ø–æ—Ä–æ–≥: $DISK_CRITICAL%)

üîÑ <b>–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å—ã:</b>
<pre>$(echo "$top_processes" | head -1)
$(echo "$top_processes" | tail -n +2 | head -5)</pre>

üïê –í—Ä–µ–º—è: $(date '+%Y-%m-%d %H:%M:%S')

üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ."

  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  if type send_telegram_notification &>/dev/null; then
    log_message "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ"
    send_telegram_notification "$message"
  else
    log_message "–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
check_and_handle_heavy_processes() {
  log_message "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã..."
  
  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU
  TOP_CPU_PROCESSES=$(ps aux --sort=-%cpu | head -11)
  log_message "–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ CPU:"
  echo "$TOP_CPU_PROCESSES" | tee -a $OPTIMIZE_LOG
  
  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–∞–º—è—Ç–∏
  TOP_MEM_PROCESSES=$(ps aux --sort=-%mem | head -11)
  log_message "–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –ø–∞–º—è—Ç–∏:"
  echo "$TOP_MEM_PROCESSES" | tee -a $OPTIMIZE_LOG
  
  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º CPU
  for i in {1..5}; do
    PID=$(ps aux --sort=-%cpu | awk -v line=$((i+1)) 'NR==line {print $2}')
    if [ -n "$PID" ]; then
      CPU_PERCENT=$(ps aux --sort=-%cpu | awk -v line=$((i+1)) 'NR==line {print $3}')
      COMM=$(ps -p $PID -o comm=)
      
      if (( $(echo "$CPU_PERCENT > 50" | bc -l) )); then
        log_message "–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç—è–∂–µ–ª—ã–π –ø—Ä–æ—Ü–µ—Å—Å: $COMM (PID: $PID) —Å CPU: $CPU_PERCENT%"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        if type is_critical_process &>/dev/null && is_critical_process "$COMM"; then
          log_message "–ü—Ä–æ—Ü–µ—Å—Å $COMM —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–Ω—ã–º, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ $CPU_LIMIT_NORMAL% CPU"
          cpulimit -p $PID -l $CPU_LIMIT_NORMAL -b 2>/dev/null
        elif type is_limitable_process &>/dev/null && is_limitable_process "$COMM"; then
          log_message "–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å $COMM (PID: $PID) –¥–æ $CPU_LIMIT_STRICT% CPU"
          cpulimit -p $PID -l $CPU_LIMIT_STRICT -b 2>/dev/null
        elif type is_stoppable_process &>/dev/null && is_stoppable_process "$COMM"; then
          log_message "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å $COMM (PID: $PID)"
          kill $PID 2>/dev/null
        else
          # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
          if echo "$COMM" | grep -qE 'nginx|sshd|systemd|mysql|postgres|docker'; then
            log_message "–ü—Ä–æ—Ü–µ—Å—Å $COMM —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–Ω—ã–º, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 30% CPU"
            cpulimit -p $PID -l 30 -b 2>/dev/null
          else
            log_message "–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å $COMM (PID: $PID) –¥–æ 15% CPU"
            cpulimit -p $PID -l 15 -b 2>/dev/null
            
            # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —è–≤–Ω–æ –Ω–µ –Ω—É–∂–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
            if echo "$COMM" | grep -qE 'chrome|rg|find|grep'; then
              log_message "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å $COMM (PID: $PID)"
              kill $PID 2>/dev/null
            fi
          fi
        fi
      fi
    fi
  done
  
  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏
  for i in {1..5}; do
    PID=$(ps aux --sort=-%mem | awk -v line=$((i+1)) 'NR==line {print $2}')
    if [ -n "$PID" ]; then
      MEM_PERCENT=$(ps aux --sort=-%mem | awk -v line=$((i+1)) 'NR==line {print $4}')
      COMM=$(ps -p $PID -o comm=)
      
      if (( $(echo "$MEM_PERCENT > 30" | bc -l) )); then
        log_message "–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏: $COMM (PID: $PID) —Å MEM: $MEM_PERCENT%"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        if type is_critical_process &>/dev/null && is_critical_process "$COMM"; then
          log_message "–ü—Ä–æ—Ü–µ—Å—Å $COMM —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–Ω—ã–º, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ"
          if systemctl list-unit-files | grep -q "$COMM"; then
            systemctl restart $COMM 2>/dev/null
          fi
        elif type is_stoppable_process &>/dev/null && is_stoppable_process "$COMM"; then
          log_message "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏: $COMM (PID: $PID)"
          kill $PID 2>/dev/null
        else
          # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
          if echo "$COMM" | grep -qE 'nginx|sshd|systemd|mysql|postgres'; then
            log_message "–ü—Ä–æ—Ü–µ—Å—Å $COMM —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–Ω—ã–º, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ"
            if systemctl list-unit-files | grep -q "$COMM"; then
              systemctl restart $COMM 2>/dev/null
            fi
          else
            log_message "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏: $COMM (PID: $PID)"
            kill $PID 2>/dev/null
          fi
        fi
      fi
    fi
  done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
  log_message "–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Ç–∏–ª–∏—Ç
  for cmd in cpulimit bc docker systemctl curl; do
    if ! command -v $cmd &> /dev/null; then
      log_message "–í–ù–ò–ú–ê–ù–ò–ï: –£—Ç–∏–ª–∏—Ç–∞ $cmd –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
      apt-get update && apt-get install -y $cmd 2>/dev/null || yum install -y $cmd 2>/dev/null
    fi
  done
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö
  log_message "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫..."
  ERROR_LOGS=$(grep -i "error\|failed\|warning" /var/log/syslog /var/log/messages /var/log/dmesg 2>/dev/null | tail -n 50)
  if [ -n "$ERROR_LOGS" ]; then
    log_message "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–∞—Ö:"
    echo "$ERROR_LOGS" | tee -a $OPTIMIZE_LOG
  fi
}

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome
log_message "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome..."
pkill chrome 2>/dev/null

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ–∏—Å–∫–∞ ripgrep
log_message "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ–∏—Å–∫–∞ ripgrep..."
pkill rg 2>/dev/null

# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ CPU –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Node.js
log_message "–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ CPU –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Node.js..."
for pid in $(ps aux | grep node | grep -v grep | awk '{print $2}'); do
  cpulimit -p $pid -l $CPU_LIMIT_NORMAL -b 2>/dev/null
done

# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ CPU –¥–ª—è Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
log_message "–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ CPU –¥–ª—è Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
for pid in $(ps aux | grep python | grep -v grep | awk '{print $2}'); do
  cpulimit -p $pid -l $CPU_LIMIT_NORMAL -b 2>/dev/null
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º –±–æ–ª—å—à–∏–µ –ª–æ–≥-—Ñ–∞–π–ª—ã
log_message "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º –±–æ–ª—å—à–∏–µ –ª–æ–≥-—Ñ–∞–π–ª—ã..."
find /home -name "*.log" -size +${MAX_LOG_SIZE_MB}M -type f | while read file; do
  log_message "–ê—Ä—Ö–∏–≤–∏—Ä—É—é –±–æ–ª—å—à–æ–π –ª–æ–≥-—Ñ–∞–π–ª: $file"
  cp "$file" "${file}.${DATE}.bak"
  echo "Log rotated on ${DATE}" > "$file"
done

# –û—á–∏—â–∞–µ–º –∫—ç—à –ø–∞–º—è—Ç–∏
log_message "–û—á–∏—â–∞–µ–º –∫—ç—à –ø–∞–º—è—Ç–∏..."
sync && echo 3 > /proc/sys/vm/drop_caches

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ clamd –ø—Ä–æ—Ü–µ—Å—Å–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏
log_message "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º clamd..."
CLAMD_MEM_PERCENT=$(ps aux | grep clamd | grep -v grep | awk '{print $4}' | head -1)
if [ -n "$CLAMD_MEM_PERCENT" ]; then
  if (( $(echo "$CLAMD_MEM_PERCENT > 20" | bc -l) )); then
    log_message "clamd –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç ${CLAMD_MEM_PERCENT}% –ø–∞–º—è—Ç–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
    docker stop mailcowdockerized-clamd-mailcow-1 >/dev/null 2>&1
    log_message "–û–∂–∏–¥–∞–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º clamd —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏..."
    sleep 30
    log_message "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º clamd —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏..."
    docker start mailcowdockerized-clamd-mailcow-1 >/dev/null 2>&1
    docker update --memory=256m --memory-swap=384m mailcowdockerized-clamd-mailcow-1 >/dev/null 2>&1
  fi
fi

# –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—è–∂–µ–ª—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
check_and_handle_heavy_processes

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies

# –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–Ω–∏–∑–∏–ª–∞—Å—å –ª–∏ –Ω–∞–≥—Ä—É–∑–∫–∞
log_message "–û–∂–∏–¥–∞–µ–º 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏..."
sleep 60

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä—É–∑–∫—É
INITIAL_LOAD=$(cat /proc/loadavg | cut -d' ' -f1)
log_message "–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: $INITIAL_LOAD"

# –ï—Å–ª–∏ –Ω–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ –µ—â–µ –≤—ã—Å–æ–∫–∞—è, –ø—Ä–∏–º–µ–Ω—è–µ–º –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –º–µ—Ä—ã
if check_load; then
  log_message "–ù–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ –µ—â–µ –≤—ã—Å–æ–∫–∞—è, –ø—Ä–∏–º–µ–Ω—è–µ–º –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –º–µ—Ä—ã..."
  
  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
  send_alert
  
  # –í—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—è–∂–µ–ª—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
  for i in {1..10}; do
    PID=$(ps aux --sort=-%cpu | awk -v line=$((i+1)) 'NR==line {print $2}')
    if [ -n "$PID" ]; then
      COMM=$(ps -p $PID -o comm=)
      CPU_PERCENT=$(ps aux --sort=-%cpu | awk -v line=$((i+1)) 'NR==line {print $3}')
      
      log_message "–°—Ç—Ä–æ–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ $COMM (PID: $PID) —Å CPU: $CPU_PERCENT%"
      
      # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
      if type is_critical_process &>/dev/null && type is_stoppable_process &>/dev/null; then
        if is_stoppable_process "$COMM"; then
          log_message "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å $COMM (PID: $PID)"
          kill -15 $PID 2>/dev/null
        elif is_critical_process "$COMM"; then
          log_message "–°—Ç—Ä–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å $COMM (PID: $PID) –¥–æ $CPU_LIMIT_CRITICAL% CPU"
          cpulimit -p $PID -l $CPU_LIMIT_CRITICAL -b 2>/dev/null
        else 
          log_message "–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å $COMM (PID: $PID) –¥–æ $CPU_LIMIT_STRICT% CPU"
          cpulimit -p $PID -l $CPU_LIMIT_STRICT -b 2>/dev/null
        fi
      else
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ—Ç
        if ! echo "$COMM" | grep -qE 'nginx|sshd|systemd|mysql|postgres|docker|bash|sh'; then
          log_message "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å $COMM (PID: $PID)"
          kill -15 $PID 2>/dev/null
        else
          # –ò–Ω–∞—á–µ —Å–∏–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
          log_message "–°—Ç—Ä–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å $COMM (PID: $PID) –¥–æ 5% CPU"
          cpulimit -p $PID -l 5 -b 2>/dev/null
        fi
      fi
    fi
  done
  
  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
  log_message "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã..."
  for service in nginx apache2 cron atd cups bluetooth; do
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ—Ä–≤–∏—Å –∫—Ä–∏—Ç–∏—á–Ω—ã–º —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if type is_critical_process &>/dev/null && is_critical_process "$service"; then
      log_message "–°–µ—Ä–≤–∏—Å $service –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–Ω—ã–π, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º"
      continue
    fi
    
    if systemctl is-active $service &>/dev/null; then
      log_message "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å $service"
      systemctl stop $service 2>/dev/null
    fi
  done
  
  # –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
  log_message "–û–∂–∏–¥–∞–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–≥–∏—Ö –º–µ—Ä..."
  sleep 60
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É —Å–Ω–æ–≤–∞
  FINAL_LOAD=$(cat /proc/loadavg | cut -d' ' -f1)
  log_message "–ù–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–≥–∏—Ö –º–µ—Ä: $FINAL_LOAD"
  
  # –ï—Å–ª–∏ –Ω–∞–≥—Ä—É–∑–∫–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ–±—Ä–∞—Ç–Ω–æ
  if ! check_load; then
    log_message "–ù–∞–≥—Ä—É–∑–∫–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å, –∑–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã..."
    systemctl start nginx 2>/dev/null
  else
    log_message "–ù–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ –µ—â–µ –≤—ã—Å–æ–∫–∞—è! –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã..."
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    DISK_INFO=$(df -h)
    NET_INFO=$(netstat -tuln | head -20)
    
    if type send_telegram_notification &>/dev/null; then
      log_message "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"
      send_telegram_notification "üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø –ü–†–û–î–û–õ–ñ–ê–ï–¢–°–Ø!</b> üö®
      
üìä <b>–ù–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤—ã—Å–æ–∫–æ–π:</b> $FINAL_LOAD

üíæ <b>–î–∏—Å–∫–∏:</b>
<pre>$(echo "$DISK_INFO" | head -6)</pre>

üåê <b>–°–µ—Ç—å:</b>
<pre>$(echo "$NET_INFO" | head -10)</pre>

‚ö†Ô∏è <b>–¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–û–ï –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û</b>"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–∫–∏
    log_message "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏—Å–∫–æ–≤..."
    df -h | tee -a $OPTIMIZE_LOG
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    log_message "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."
    netstat -tuln | tee -a $OPTIMIZE_LOG
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
    log_message "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    lsof | wc -l | tee -a $OPTIMIZE_LOG
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Docker
    if command -v docker &> /dev/null; then
      log_message "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Docker..."
      docker stats --no-stream | tee -a $OPTIMIZE_LOG
    fi
    
    # –ü–æ—Å–ª–µ–¥–Ω—è—è –º–µ—Ä–∞ - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    log_message "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã..."
    systemctl daemon-reload
    systemctl restart cron atd 2>/dev/null
  fi
fi

# –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –Ω–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
HOUR=$(date +%H)
if [ $HOUR -ge $NIGHT_START ] && [ $HOUR -lt $NIGHT_END ]; then
  # –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è - –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
  log_message "–ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è - –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–≥–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤"
  for pid in $(ps aux | grep node | grep -v grep | awk '{print $2}'); do
    cpulimit -p $pid -l $NIGHT_CPU_LIMIT -b 2>/dev/null
  done
  
  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å clamd –Ω–∞ –Ω–æ—á—å
  log_message "–ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º clamd –¥–æ —É—Ç—Ä–∞"
  docker stop mailcowdockerized-clamd-mailcow-1 >/dev/null 2>&1
fi

log_message "=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ ==="
log_message "–ò—Ç–æ–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: $(cat /proc/loadavg)"
log_message "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: $(free -h)"

# –í –∫–æ–Ω–µ—Ü —Å–∫—Ä–∏–ø—Ç–∞
STATS_FILE="/var/log/performance_stats.log"
echo "$(date '+%Y-%m-%d %H:%M:%S') $(cat /proc/loadavg | cut -d' ' -f1-3) $(free -m | awk 'NR==2 {print $3}')" >> $STATS_FILE
